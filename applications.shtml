<!--#include virtual="open.shtml" -->
<!--#include virtual="header.shtml" -->

<div class="content">

<p>
<h2>Super-Resolution</h2>
<p>
In the following application examples, the input images were obtained by
blurring and downsampling the original images.  These downsampled images were
then upsampled with various super-resolution methods.
<p>
<h3>General Images 2x Super-resolution</h3>
<!--#include virtual="sr2_2x2.shtml" -->
<h3>General Images 4x Super-resolution</h3>
<!--#include virtual="sr2_4x4.shtml" -->
<h3>Natural Images 2x Super-resolution</h3>
<!--#include virtual="sr1_2x2.shtml" -->
<h3>Natural Images 4x Super-resolution</h3>
<!--#include virtual="sr1_4x4.shtml" -->
<p>
<h2>Super-Resolution (Qualitative)</h2>
<p>
In the following application examples, the original images were used as input,
so there exists no references against which to measure error.
<p>
<h3>General Images 4x Super-resolution</h3>
<!--#include virtual="sr3_4x4.shtml" -->
<p>
<h2>Super-Resolution Notes</h2>
<p>
The Gaussian kernel used to blur the images in the first group of examples had a
standard deviation of 0.85 or 1.7 pixels and a support size of 1.5, 2.0, 3.5, or
4.0 pixels, depending on the downsampling scale and depending upon whether even-
or odd-kernel downsampling was applied.
<p>
Bilinear, spline, bicubic, and Lanczos images were upsampled using <a
href="http://www.imagemagick.org">ImageMagick</a> version 6.6.
<p>
<a
href="http://www.ononesoftware.com/products/suite/perfect-resize/?ind">Perfect
Resize 7.0</a> is a commercial image resizing application, previously known as
Genuine Fractals.  Note that this application does not align the pixels properly
when it resizes an image, and therefore the reported mean squared errors in the
Perfect Resize 7.0 examples are higher than they would be if the pixels were
aligned.

<p>
The images in the second group of examples were obtained from
<a href="http://www.wisdom.weizmann.ac.il/~vision/SingleImageSR.html">
The Weizmann Institute of Science
Faculty of Mathematics and Computer Science
Computer Vision Lab</a>.

<a name="denoising"></a>
<h2>Denoising</h2>
<p>
In the following application examples, the input images were obtained by
adding synthesized noise to the original images.  These images were then
denoised using various denoising methods.
<p>
The Recursive Conditional Moments (RCM) method used in these examples is a
method based upon Natural Scene Statistics.
<p>
<h3>General Images Denoising</h3>
<br>Low Noise Levels<br>
<!--#include virtual="denoise2_sigma5.shtml" -->
<br>Medium Noise Levels<br>
<!--#include virtual="denoise2_sigma10.shtml" -->
<br>High Noise Levels<br>
<!--#include virtual="denoise2_sigma15.shtml" -->
<br>Very High Noise Levels<br>
<!--#include virtual="denoise2_sigma25.shtml" -->
<h3>Natural Images Denoising</h3>
<br>Low Noise Levels<br>
<!--#include virtual="denoise1_sigma5.shtml" -->
<br>Medium Noise Levels<br>
<!--#include virtual="denoise1_sigma10.shtml" -->
<br>High Noise Levels<br>
<!--#include virtual="denoise1_sigma15.shtml" -->
<br>Very High Noise Levels<br>
<!--#include virtual="denoise1_sigma25.shtml" -->
<p>

</div>

<!--#include virtual="menu.shtml" -->
<!--#include virtual="footer.shtml" -->
<!--#include virtual="close.shtml" -->
